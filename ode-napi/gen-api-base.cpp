
// FILE GENERATED BY generate-api-bindings.py
#include <string>
#include "addon.h"
#include "napi-wrap.h"
#include "gen-api-base.h"
#include "gen-api-base.h"
Napi::Value bind_ode_destroyString(const Napi::CallbackInfo& info);
Napi::Value bind_ode_allocateMemoryBuffer(const Napi::CallbackInfo& info);
Napi::Value bind_ode_reallocateMemoryBuffer(const Napi::CallbackInfo& info);
Napi::Value bind_ode_destroyMemoryBuffer(const Napi::CallbackInfo& info);

Napi::Object init_gen_api_base(Napi::Env env, Napi::Object exports) {

    {
        auto Result = Napi::Object::New(env);
        Result.Set("OK", uint32_t(ODE_RESULT_OK));
        Result.Set("UNKNOWN_ERROR", uint32_t(ODE_RESULT_UNKNOWN_ERROR));
        Result.Set("NOT_IMPLEMENTED", uint32_t(ODE_RESULT_NOT_IMPLEMENTED));
        Result.Set("MEMORY_ALLOCATION_ERROR", uint32_t(ODE_RESULT_MEMORY_ALLOCATION_ERROR));
        Result.Set("FILE_READ_ERROR", uint32_t(ODE_RESULT_FILE_READ_ERROR));
        Result.Set("FILE_WRITE_ERROR", uint32_t(ODE_RESULT_FILE_WRITE_ERROR));
        Result.Set("OCTOPUS_PARSE_ERROR", uint32_t(ODE_RESULT_OCTOPUS_PARSE_ERROR));
        Result.Set("OCTOPUS_MANIFEST_PARSE_ERROR", uint32_t(ODE_RESULT_OCTOPUS_MANIFEST_PARSE_ERROR));
        Result.Set("ANIMATION_PARSE_ERROR", uint32_t(ODE_RESULT_ANIMATION_PARSE_ERROR));
        Result.Set("ITEM_NOT_FOUND", uint32_t(ODE_RESULT_ITEM_NOT_FOUND));
        Result.Set("LAYER_NOT_FOUND", uint32_t(ODE_RESULT_LAYER_NOT_FOUND));
        Result.Set("COMPONENT_NOT_FOUND", uint32_t(ODE_RESULT_COMPONENT_NOT_FOUND));
        Result.Set("DUPLICATE_COMPONENT_ID", uint32_t(ODE_RESULT_DUPLICATE_COMPONENT_ID));
        Result.Set("DUPLICATE_LAYER_ID", uint32_t(ODE_RESULT_DUPLICATE_LAYER_ID));
        Result.Set("OCTOPUS_UNAVAILABLE", uint32_t(ODE_RESULT_OCTOPUS_UNAVAILABLE));
        Result.Set("COMPONENT_IN_USE", uint32_t(ODE_RESULT_COMPONENT_IN_USE));
        Result.Set("ALREADY_INITIALIZED", uint32_t(ODE_RESULT_ALREADY_INITIALIZED));
        Result.Set("SHAPE_LAYER_ERROR", uint32_t(ODE_RESULT_SHAPE_LAYER_ERROR));
        Result.Set("TEXT_LAYER_ERROR", uint32_t(ODE_RESULT_TEXT_LAYER_ERROR));
        Result.Set("WRONG_LAYER_TYPE", uint32_t(ODE_RESULT_WRONG_LAYER_TYPE));
        Result.Set("INVALID_DESIGN", uint32_t(ODE_RESULT_INVALID_DESIGN));
        Result.Set("INVALID_COMPONENT", uint32_t(ODE_RESULT_INVALID_COMPONENT));
        Result.Set("INVALID_PIXEL_FORMAT", uint32_t(ODE_RESULT_INVALID_PIXEL_FORMAT));
        Result.Set("INVALID_BITMAP_DIMENSIONS", uint32_t(ODE_RESULT_INVALID_BITMAP_DIMENSIONS));
        Result.Set("INVALID_RENDERER_CONTEXT", uint32_t(ODE_RESULT_INVALID_RENDERER_CONTEXT));
        Result.Set("INVALID_IMAGE_BASE", uint32_t(ODE_RESULT_INVALID_IMAGE_BASE));
        Result.Set("FONT_ERROR", uint32_t(ODE_RESULT_FONT_ERROR));
        Result.Set("GRAPHICS_CONTEXT_ERROR", uint32_t(ODE_RESULT_GRAPHICS_CONTEXT_ERROR));
        exports.Set("Result", Result);
    }

    // TODO: typedef Scalar

    // TODO: typedef VarDataPtr

    // TODO: typedef ConstDataPtr

    // TODO: typedef ConstCharPtr

    // TODO: tuple Vector2

    // TODO: tuple Rectangle





    exports.Set("destroyString", Napi::Function::New<bind_ode_destroyString>(env, "destroyString"));
    exports.Set("allocateMemoryBuffer", Napi::Function::New<bind_ode_allocateMemoryBuffer>(env, "allocateMemoryBuffer"));
    exports.Set("reallocateMemoryBuffer", Napi::Function::New<bind_ode_reallocateMemoryBuffer>(env, "reallocateMemoryBuffer"));
    exports.Set("destroyMemoryBuffer", Napi::Function::New<bind_ode_destroyMemoryBuffer>(env, "destroyMemoryBuffer"));    return exports;
}

std::string Result_to_string(ODE_Result value) {
    switch(value) {
        case ODE_RESULT_OK: return "OK";
        case ODE_RESULT_UNKNOWN_ERROR: return "UNKNOWN_ERROR";
        case ODE_RESULT_NOT_IMPLEMENTED: return "NOT_IMPLEMENTED";
        case ODE_RESULT_MEMORY_ALLOCATION_ERROR: return "MEMORY_ALLOCATION_ERROR";
        case ODE_RESULT_FILE_READ_ERROR: return "FILE_READ_ERROR";
        case ODE_RESULT_FILE_WRITE_ERROR: return "FILE_WRITE_ERROR";
        case ODE_RESULT_OCTOPUS_PARSE_ERROR: return "OCTOPUS_PARSE_ERROR";
        case ODE_RESULT_OCTOPUS_MANIFEST_PARSE_ERROR: return "OCTOPUS_MANIFEST_PARSE_ERROR";
        case ODE_RESULT_ANIMATION_PARSE_ERROR: return "ANIMATION_PARSE_ERROR";
        case ODE_RESULT_ITEM_NOT_FOUND: return "ITEM_NOT_FOUND";
        case ODE_RESULT_LAYER_NOT_FOUND: return "LAYER_NOT_FOUND";
        case ODE_RESULT_COMPONENT_NOT_FOUND: return "COMPONENT_NOT_FOUND";
        case ODE_RESULT_DUPLICATE_COMPONENT_ID: return "DUPLICATE_COMPONENT_ID";
        case ODE_RESULT_DUPLICATE_LAYER_ID: return "DUPLICATE_LAYER_ID";
        case ODE_RESULT_OCTOPUS_UNAVAILABLE: return "OCTOPUS_UNAVAILABLE";
        case ODE_RESULT_COMPONENT_IN_USE: return "COMPONENT_IN_USE";
        case ODE_RESULT_ALREADY_INITIALIZED: return "ALREADY_INITIALIZED";
        case ODE_RESULT_SHAPE_LAYER_ERROR: return "SHAPE_LAYER_ERROR";
        case ODE_RESULT_TEXT_LAYER_ERROR: return "TEXT_LAYER_ERROR";
        case ODE_RESULT_WRONG_LAYER_TYPE: return "WRONG_LAYER_TYPE";
        case ODE_RESULT_INVALID_DESIGN: return "INVALID_DESIGN";
        case ODE_RESULT_INVALID_COMPONENT: return "INVALID_COMPONENT";
        case ODE_RESULT_INVALID_PIXEL_FORMAT: return "INVALID_PIXEL_FORMAT";
        case ODE_RESULT_INVALID_BITMAP_DIMENSIONS: return "INVALID_BITMAP_DIMENSIONS";
        case ODE_RESULT_INVALID_RENDERER_CONTEXT: return "INVALID_RENDERER_CONTEXT";
        case ODE_RESULT_INVALID_IMAGE_BASE: return "INVALID_IMAGE_BASE";
        case ODE_RESULT_FONT_ERROR: return "FONT_ERROR";
        case ODE_RESULT_GRAPHICS_CONTEXT_ERROR: return "GRAPHICS_CONTEXT_ERROR";
        default: return "UNKNOWN_Result_"+std::to_string(uint32_t(value));
    }
}

template<>
ODE_Scalar* Autobind<ODE_Scalar>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_Scalar>::read_ptr").ThrowAsJavaScriptException();
    return {};
}
template<>
ODE_VarDataPtr* Autobind<ODE_VarDataPtr>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_VarDataPtr>::read_ptr").ThrowAsJavaScriptException();
    return {};
}
template<>
ODE_ConstDataPtr* Autobind<ODE_ConstDataPtr>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_ConstDataPtr>::read_ptr").ThrowAsJavaScriptException();
    return {};
}
template<>
ODE_ConstCharPtr* Autobind<ODE_ConstCharPtr>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_ConstCharPtr>::read_ptr").ThrowAsJavaScriptException();
    return {};
}
template<>
ODE_Vector2* Autobind<ODE_Vector2>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_Vector2>::read_ptr").ThrowAsJavaScriptException();
    return {};
}
template<>
ODE_Rectangle* Autobind<ODE_Rectangle>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_Rectangle>::read_ptr").ThrowAsJavaScriptException();
    return {};
}
template<>
bool Autobind<ODE_StringRef>::read_into(const Napi::Value& value, ODE_StringRef& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    uintptr_t ptr_data;
    if(Autobind<uintptr_t>::read_into(obj.Get("data"), ptr_data)) {
        parsed.data = reinterpret_cast<ODE_ConstCharPtr>(ptr_data);
    } else {
        return false;
    }
    if(!Autobind<int>::read_into(obj.Get("length"), parsed.length)) {
        return false;
    }
    return true;
}
template<>
ODE_StringRef* Autobind<ODE_StringRef>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_StringRef>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
bool Autobind<ODE_String>::read_into(const Napi::Value& value, ODE_String& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    uintptr_t ptr_data;
    if(Autobind<uintptr_t>::read_into(obj.Get("data"), ptr_data)) {
        parsed.data = reinterpret_cast<char *>(ptr_data);
    } else {
        return false;
    }
    if(!Autobind<int>::read_into(obj.Get("length"), parsed.length)) {
        return false;
    }
    return true;
}
template<>
ODE_String* Autobind<ODE_String>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_String>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
bool Autobind<ODE_MemoryBuffer>::read_into(const Napi::Value& value, ODE_MemoryBuffer& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    uintptr_t ptr_data;
    if(Autobind<uintptr_t>::read_into(obj.Get("data"), ptr_data)) {
        parsed.data = reinterpret_cast<ODE_VarDataPtr>(ptr_data);
    } else {
        return false;
    }
    if(!Autobind<size_t>::read_into(obj.Get("length"), parsed.length)) {
        return false;
    }
    return true;
}
template<>
ODE_MemoryBuffer* Autobind<ODE_MemoryBuffer>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_MemoryBuffer>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
bool Autobind<ODE_StringList>::read_into(const Napi::Value& value, ODE_StringList& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    uintptr_t ptr_entries;
    if(Autobind<uintptr_t>::read_into(obj.Get("entries"), ptr_entries)) {
        parsed.entries = reinterpret_cast<ODE_StringRef *>(ptr_entries);
    } else {
        return false;
    }
    if(!Autobind<int>::read_into(obj.Get("n"), parsed.n)) {
        return false;
    }
    return true;
}
template<>
ODE_StringList* Autobind<ODE_StringList>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_StringList>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
Napi::Value bind_ode_destroyString(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_String v1;
    if(!Autobind<ODE_String>::read_into(info[0], v1)) return Napi::Value();
    auto result = ode_destroyString(v1);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_allocateMemoryBuffer(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    auto arg1 = Autobind<ODE_MemoryBuffer >::read_ptr(info[0]);
    if (arg1 == nullptr) return Napi::Value();
    size_t v2;
    if(!Autobind<size_t>::read_into(info[1], v2)) return Napi::Value();
    auto result = ode_allocateMemoryBuffer(arg1, v2);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_reallocateMemoryBuffer(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    auto arg1 = Autobind<ODE_MemoryBuffer >::read_ptr(info[0]);
    if (arg1 == nullptr) return Napi::Value();
    size_t v2;
    if(!Autobind<size_t>::read_into(info[1], v2)) return Napi::Value();
    auto result = ode_reallocateMemoryBuffer(arg1, v2);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_destroyMemoryBuffer(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    auto arg1 = Autobind<ODE_MemoryBuffer >::read_ptr(info[0]);
    if (arg1 == nullptr) return Napi::Value();
    auto result = ode_destroyMemoryBuffer(arg1);
    return Napi::String::New(env, Result_to_string(result));
}

