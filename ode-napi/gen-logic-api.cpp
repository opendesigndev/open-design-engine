
// FILE GENERATED BY generate-api-bindings.py
#include <string>
#include "addon.h"
#include "napi-wrap.h"
#include "gen-api-base.h"
#include "gen-logic-api.h"
Napi::Value bind_ode_destroyLayerList(const Napi::CallbackInfo& info);
Napi::Value bind_ode_destroyMissingFontList(const Napi::CallbackInfo& info);
Napi::Value bind_ode_initializeEngineAttributes(const Napi::CallbackInfo& info);
Napi::Value bind_ode_createEngine(const Napi::CallbackInfo& info);
Napi::Value bind_ode_destroyEngine(const Napi::CallbackInfo& info);
Napi::Value bind_ode_createDesign(const Napi::CallbackInfo& info);
Napi::Value bind_ode_loadDesignFromManifestString(const Napi::CallbackInfo& info);
Napi::Value bind_ode_destroyDesign(const Napi::CallbackInfo& info);
Napi::Value bind_ode_design_loadManifestString(const Napi::CallbackInfo& info);
Napi::Value bind_ode_design_addComponentFromOctopusString(const Napi::CallbackInfo& info);
Napi::Value bind_ode_design_removeComponent(const Napi::CallbackInfo& info);
Napi::Value bind_ode_design_listMissingFonts(const Napi::CallbackInfo& info);
Napi::Value bind_ode_design_loadFontBytes(const Napi::CallbackInfo& info);
Napi::Value bind_ode_design_getComponent(const Napi::CallbackInfo& info);
Napi::Value bind_ode_component_addLayer(const Napi::CallbackInfo& info);
Napi::Value bind_ode_component_modifyLayer(const Napi::CallbackInfo& info);
Napi::Value bind_ode_pr1_component_loadAnimation(const Napi::CallbackInfo& info);
Napi::Value bind_ode_pr1_component_getAnimationValueAtTime(const Napi::CallbackInfo& info);
Napi::Value bind_ode_component_listLayers(const Napi::CallbackInfo& info);
Napi::Value bind_ode_component_identifyLayer(const Napi::CallbackInfo& info);
Napi::Value bind_ode_component_getLayerMetrics(const Napi::CallbackInfo& info);
Napi::Value bind_ode_component_listMissingFonts(const Napi::CallbackInfo& info);
Napi::Value bind_ode_component_getOctopus(const Napi::CallbackInfo& info);

Napi::Object init_gen_logic_api(Napi::Env env, Napi::Object exports) {

    exports.Set("LAYER_FLAG_VISIBLE", uint32_t(ODE_LAYER_FLAG_VISIBLE));

    exports.Set("LAYER_FLAG_MASK", uint32_t(ODE_LAYER_FLAG_MASK));

    {
        auto LayerType = Napi::Object::New(env);
        LayerType.Set("UNSPECIFIED", uint32_t(ODE_LAYER_TYPE_UNSPECIFIED));
        LayerType.Set("SHAPE", uint32_t(ODE_LAYER_TYPE_SHAPE));
        LayerType.Set("TEXT", uint32_t(ODE_LAYER_TYPE_TEXT));
        LayerType.Set("GROUP", uint32_t(ODE_LAYER_TYPE_GROUP));
        LayerType.Set("MASK_GROUP", uint32_t(ODE_LAYER_TYPE_MASK_GROUP));
        LayerType.Set("COMPONENT_REFERENCE", uint32_t(ODE_LAYER_TYPE_COMPONENT_REFERENCE));
        LayerType.Set("COMPONENT_INSTANCE", uint32_t(ODE_LAYER_TYPE_COMPONENT_INSTANCE));
        exports.Set("LayerType", LayerType);
    }

    // TODO: array_instance Scalar_array_6







    {
        auto ParseError_Type = Napi::Object::New(env);
        ParseError_Type.Set("OK", uint32_t(ODE_ParseError::OK));
        ParseError_Type.Set("JSON_SYNTAX_ERROR", uint32_t(ODE_ParseError::JSON_SYNTAX_ERROR));
        ParseError_Type.Set("UNEXPECTED_END_OF_FILE", uint32_t(ODE_ParseError::UNEXPECTED_END_OF_FILE));
        ParseError_Type.Set("TYPE_MISMATCH", uint32_t(ODE_ParseError::TYPE_MISMATCH));
        ParseError_Type.Set("ARRAY_SIZE_MISMATCH", uint32_t(ODE_ParseError::ARRAY_SIZE_MISMATCH));
        ParseError_Type.Set("UNKNOWN_KEY", uint32_t(ODE_ParseError::UNKNOWN_KEY));
        ParseError_Type.Set("UNKNOWN_ENUM_VALUE", uint32_t(ODE_ParseError::UNKNOWN_ENUM_VALUE));
        ParseError_Type.Set("VALUE_OUT_OF_RANGE", uint32_t(ODE_ParseError::VALUE_OUT_OF_RANGE));
        ParseError_Type.Set("STRING_EXPECTED", uint32_t(ODE_ParseError::STRING_EXPECTED));
        ParseError_Type.Set("UTF16_ENCODING_ERROR", uint32_t(ODE_ParseError::UTF16_ENCODING_ERROR));
        exports.Set("ParseError_Type", ParseError_Type);
    }


    Handle<ODE_EngineHandle>::Export(exports);
    Handle<ODE_DesignHandle>::Export(exports);
    Handle<ODE_ComponentHandle>::Export(exports);
    exports.Set("destroyLayerList", Napi::Function::New<bind_ode_destroyLayerList>(env, "destroyLayerList"));
    exports.Set("destroyMissingFontList", Napi::Function::New<bind_ode_destroyMissingFontList>(env, "destroyMissingFontList"));
    exports.Set("initializeEngineAttributes", Napi::Function::New<bind_ode_initializeEngineAttributes>(env, "initializeEngineAttributes"));
    exports.Set("createEngine", Napi::Function::New<bind_ode_createEngine>(env, "createEngine"));
    exports.Set("destroyEngine", Napi::Function::New<bind_ode_destroyEngine>(env, "destroyEngine"));
    exports.Set("createDesign", Napi::Function::New<bind_ode_createDesign>(env, "createDesign"));
    exports.Set("loadDesignFromManifestString", Napi::Function::New<bind_ode_loadDesignFromManifestString>(env, "loadDesignFromManifestString"));
    exports.Set("destroyDesign", Napi::Function::New<bind_ode_destroyDesign>(env, "destroyDesign"));
    exports.Set("design_loadManifestString", Napi::Function::New<bind_ode_design_loadManifestString>(env, "design_loadManifestString"));
    exports.Set("design_addComponentFromOctopusString", Napi::Function::New<bind_ode_design_addComponentFromOctopusString>(env, "design_addComponentFromOctopusString"));
    exports.Set("design_removeComponent", Napi::Function::New<bind_ode_design_removeComponent>(env, "design_removeComponent"));
    exports.Set("design_listMissingFonts", Napi::Function::New<bind_ode_design_listMissingFonts>(env, "design_listMissingFonts"));
    exports.Set("design_loadFontBytes", Napi::Function::New<bind_ode_design_loadFontBytes>(env, "design_loadFontBytes"));
    exports.Set("design_getComponent", Napi::Function::New<bind_ode_design_getComponent>(env, "design_getComponent"));
    exports.Set("component_addLayer", Napi::Function::New<bind_ode_component_addLayer>(env, "component_addLayer"));
    exports.Set("component_modifyLayer", Napi::Function::New<bind_ode_component_modifyLayer>(env, "component_modifyLayer"));
    exports.Set("pr1_component_loadAnimation", Napi::Function::New<bind_ode_pr1_component_loadAnimation>(env, "pr1_component_loadAnimation"));
    exports.Set("pr1_component_getAnimationValueAtTime", Napi::Function::New<bind_ode_pr1_component_getAnimationValueAtTime>(env, "pr1_component_getAnimationValueAtTime"));
    exports.Set("component_listLayers", Napi::Function::New<bind_ode_component_listLayers>(env, "component_listLayers"));
    exports.Set("component_identifyLayer", Napi::Function::New<bind_ode_component_identifyLayer>(env, "component_identifyLayer"));
    exports.Set("component_getLayerMetrics", Napi::Function::New<bind_ode_component_getLayerMetrics>(env, "component_getLayerMetrics"));
    exports.Set("component_listMissingFonts", Napi::Function::New<bind_ode_component_listMissingFonts>(env, "component_listMissingFonts"));
    exports.Set("component_getOctopus", Napi::Function::New<bind_ode_component_getOctopus>(env, "component_getOctopus"));    return exports;
}

std::string LayerType_to_string(ODE_LayerType value) {
    switch(value) {
        case ODE_LAYER_TYPE_UNSPECIFIED: return "UNSPECIFIED";
        case ODE_LAYER_TYPE_SHAPE: return "SHAPE";
        case ODE_LAYER_TYPE_TEXT: return "TEXT";
        case ODE_LAYER_TYPE_GROUP: return "GROUP";
        case ODE_LAYER_TYPE_MASK_GROUP: return "MASK_GROUP";
        case ODE_LAYER_TYPE_COMPONENT_REFERENCE: return "COMPONENT_REFERENCE";
        case ODE_LAYER_TYPE_COMPONENT_INSTANCE: return "COMPONENT_INSTANCE";
        default: return "UNKNOWN_LayerType_"+std::to_string(uint32_t(value));
    }
}

template<>
bool Autobind<ODE_Transformation>::read_into(const Napi::Value& value, ODE_Transformation& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    if(!Autobind<ODE_Scalar_array_6>::read_into(obj.Get("matrix"), parsed.matrix)) {
        return false;
    }
    return true;
}
template<>
ODE_Transformation* Autobind<ODE_Transformation>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_Transformation>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
bool Autobind<ODE_EngineAttributes>::read_into(const Napi::Value& value, ODE_EngineAttributes& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    if(!Autobind<int>::read_into(obj.Get("padding"), parsed.padding)) {
        return false;
    }
    return true;
}
template<>
ODE_EngineAttributes* Autobind<ODE_EngineAttributes>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_EngineAttributes>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
bool Autobind<ODE_ComponentMetadata>::read_into(const Napi::Value& value, ODE_ComponentMetadata& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    if(!Autobind<ODE_StringRef>::read_into(obj.Get("id"), parsed.id)) {
        return false;
    }
    if(!Autobind<ODE_StringRef>::read_into(obj.Get("page"), parsed.page)) {
        return false;
    }
    if(!Autobind<ODE_Vector2>::read_into(obj.Get("position"), parsed.position)) {
        return false;
    }
    return true;
}
template<>
ODE_ComponentMetadata* Autobind<ODE_ComponentMetadata>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_ComponentMetadata>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
bool Autobind<ODE_LayerList::Entry>::read_into(const Napi::Value& value, ODE_LayerList::Entry& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    if(!Autobind<ODE_StringRef>::read_into(obj.Get("parentId"), parsed.parentId)) {
        return false;
    }
    if(!Autobind<ODE_StringRef>::read_into(obj.Get("id"), parsed.id)) {
        return false;
    }
    if(!Autobind<ODE_LayerType>::read_into(obj.Get("type"), parsed.type)) {
        return false;
    }
    if(!Autobind<int>::read_into(obj.Get("flags"), parsed.flags)) {
        return false;
    }
    if(!Autobind<ODE_StringRef>::read_into(obj.Get("name"), parsed.name)) {
        return false;
    }
    return true;
}
template<>
ODE_LayerList::Entry* Autobind<ODE_LayerList::Entry>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_LayerList::Entry>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
bool Autobind<ODE_LayerList>::read_into(const Napi::Value& value, ODE_LayerList& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    uintptr_t ptr_entries;
    if(Autobind<uintptr_t>::read_into(obj.Get("entries"), ptr_entries)) {
        parsed.entries = reinterpret_cast<ODE_LayerList::Entry *>(ptr_entries);
    } else {
        return false;
    }
    if(!Autobind<int>::read_into(obj.Get("n"), parsed.n)) {
        return false;
    }
    return true;
}
template<>
ODE_LayerList* Autobind<ODE_LayerList>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_LayerList>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
bool Autobind<ODE_LayerMetrics>::read_into(const Napi::Value& value, ODE_LayerMetrics& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    if(!Autobind<ODE_Transformation>::read_into(obj.Get("transformation"), parsed.transformation)) {
        return false;
    }
    if(!Autobind<ODE_Rectangle>::read_into(obj.Get("logicalBounds"), parsed.logicalBounds)) {
        return false;
    }
    if(!Autobind<ODE_Rectangle>::read_into(obj.Get("graphicalBounds"), parsed.graphicalBounds)) {
        return false;
    }
    if(!Autobind<ODE_Rectangle>::read_into(obj.Get("transformedGraphicalBounds"), parsed.transformedGraphicalBounds)) {
        return false;
    }
    return true;
}
template<>
ODE_LayerMetrics* Autobind<ODE_LayerMetrics>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_LayerMetrics>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
std::string ParseError_Type_to_string(ODE_ParseError::Type value) {
    switch(value) {
        case ODE_ParseError::OK: return "OK";
        case ODE_ParseError::JSON_SYNTAX_ERROR: return "JSON_SYNTAX_ERROR";
        case ODE_ParseError::UNEXPECTED_END_OF_FILE: return "UNEXPECTED_END_OF_FILE";
        case ODE_ParseError::TYPE_MISMATCH: return "TYPE_MISMATCH";
        case ODE_ParseError::ARRAY_SIZE_MISMATCH: return "ARRAY_SIZE_MISMATCH";
        case ODE_ParseError::UNKNOWN_KEY: return "UNKNOWN_KEY";
        case ODE_ParseError::UNKNOWN_ENUM_VALUE: return "UNKNOWN_ENUM_VALUE";
        case ODE_ParseError::VALUE_OUT_OF_RANGE: return "VALUE_OUT_OF_RANGE";
        case ODE_ParseError::STRING_EXPECTED: return "STRING_EXPECTED";
        case ODE_ParseError::UTF16_ENCODING_ERROR: return "UTF16_ENCODING_ERROR";
        default: return "UNKNOWN_ParseError_Type_"+std::to_string(uint32_t(value));
    }
}

template<>
bool Autobind<ODE_ParseError>::read_into(const Napi::Value& value, ODE_ParseError& parsed){
    Napi::Env env = value.Env();
    Napi::Object obj = value.As<Napi::Object>();
    if(!Autobind<ODE_ParseError::Type>::read_into(obj.Get("type"), parsed.type)) {
        return false;
    }
    if(!Autobind<int>::read_into(obj.Get("position"), parsed.position)) {
        return false;
    }
    return true;
}
template<>
ODE_ParseError* Autobind<ODE_ParseError>::read_ptr(const Napi::Value& value){
    Napi::Error::New(value.Env(), "Not implemented: Autobind<ODE_ParseError>::read_ptr").ThrowAsJavaScriptException();
    return nullptr;
}
template<>
const char* Handle<ODE_EngineHandle>::name = "EngineHandle";
template<>
bool Autobind<ODE_EngineHandle>::read_into(const Napi::Value& value, ODE_EngineHandle& target) {
    auto optional = Handle<ODE_EngineHandle>::Read(value);
    if(optional) { target = *optional; return true; }
    return false;
}
template<>
ODE_EngineHandle* Autobind<ODE_EngineHandle>::read_ptr(const Napi::Value& value) {
    return Handle<ODE_EngineHandle>::Read_ptr(value);
}

template<>
const char* Handle<ODE_DesignHandle>::name = "DesignHandle";
template<>
bool Autobind<ODE_DesignHandle>::read_into(const Napi::Value& value, ODE_DesignHandle& target) {
    auto optional = Handle<ODE_DesignHandle>::Read(value);
    if(optional) { target = *optional; return true; }
    return false;
}
template<>
ODE_DesignHandle* Autobind<ODE_DesignHandle>::read_ptr(const Napi::Value& value) {
    return Handle<ODE_DesignHandle>::Read_ptr(value);
}

template<>
const char* Handle<ODE_ComponentHandle>::name = "ComponentHandle";
template<>
bool Autobind<ODE_ComponentHandle>::read_into(const Napi::Value& value, ODE_ComponentHandle& target) {
    auto optional = Handle<ODE_ComponentHandle>::Read(value);
    if(optional) { target = *optional; return true; }
    return false;
}
template<>
ODE_ComponentHandle* Autobind<ODE_ComponentHandle>::read_ptr(const Napi::Value& value) {
    return Handle<ODE_ComponentHandle>::Read_ptr(value);
}

Napi::Value bind_ode_destroyLayerList(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_LayerList v1;
    if(!Autobind<ODE_LayerList>::read_into(info[0], v1)) return Napi::Value();
    auto result = ode_destroyLayerList(v1);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_destroyMissingFontList(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_StringList v1;
    if(!Autobind<ODE_StringList>::read_into(info[0], v1)) return Napi::Value();
    auto result = ode_destroyMissingFontList(v1);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_initializeEngineAttributes(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    auto arg1 = Autobind<ODE_EngineAttributes >::read_ptr(info[0]);
    if (arg1 == nullptr) return Napi::Value();
    auto result = ode_initializeEngineAttributes(arg1);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_createEngine(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    auto arg1 = Autobind<ODE_EngineHandle >::read_ptr(info[0]);
    if (arg1 == nullptr) return Napi::Value();
    ODE_EngineAttributes  v2;
    if(!Autobind<ODE_EngineAttributes >::read_into(info[1], v2)) return Napi::Value();
    auto result = ode_createEngine(arg1, &v2);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_destroyEngine(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_EngineHandle v1;
    if(!Autobind<ODE_EngineHandle>::read_into(info[0], v1)) return Napi::Value();
    auto result = ode_destroyEngine(v1);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_createDesign(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_EngineHandle v1;
    if(!Autobind<ODE_EngineHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_DesignHandle >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    auto result = ode_createDesign(v1, arg2);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_loadDesignFromManifestString(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_EngineHandle v1;
    if(!Autobind<ODE_EngineHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_DesignHandle >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    ODE_StringRef v3;
    if(!Autobind<ODE_StringRef>::read_into(info[2], v3)) return Napi::Value();
    auto arg4 = Autobind<ODE_ParseError >::read_ptr(info[3]);
    if (arg4 == nullptr) return Napi::Value();
    auto result = ode_loadDesignFromManifestString(v1, arg2, v3, arg4);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_destroyDesign(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_DesignHandle v1;
    if(!Autobind<ODE_DesignHandle>::read_into(info[0], v1)) return Napi::Value();
    auto result = ode_destroyDesign(v1);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_design_loadManifestString(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_DesignHandle v1;
    if(!Autobind<ODE_DesignHandle>::read_into(info[0], v1)) return Napi::Value();
    ODE_StringRef v2;
    if(!Autobind<ODE_StringRef>::read_into(info[1], v2)) return Napi::Value();
    auto arg3 = Autobind<ODE_ParseError >::read_ptr(info[2]);
    if (arg3 == nullptr) return Napi::Value();
    auto result = ode_design_loadManifestString(v1, v2, arg3);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_design_addComponentFromOctopusString(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_DesignHandle v1;
    if(!Autobind<ODE_DesignHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_ComponentHandle >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    ODE_ComponentMetadata v3;
    if(!Autobind<ODE_ComponentMetadata>::read_into(info[2], v3)) return Napi::Value();
    ODE_StringRef v4;
    if(!Autobind<ODE_StringRef>::read_into(info[3], v4)) return Napi::Value();
    auto arg5 = Autobind<ODE_ParseError >::read_ptr(info[4]);
    if (arg5 == nullptr) return Napi::Value();
    auto result = ode_design_addComponentFromOctopusString(v1, arg2, v3, v4, arg5);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_design_removeComponent(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_DesignHandle v1;
    if(!Autobind<ODE_DesignHandle>::read_into(info[0], v1)) return Napi::Value();
    ODE_ComponentHandle v2;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[1], v2)) return Napi::Value();
    auto result = ode_design_removeComponent(v1, v2);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_design_listMissingFonts(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_DesignHandle v1;
    if(!Autobind<ODE_DesignHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_StringList >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    auto result = ode_design_listMissingFonts(v1, arg2);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_design_loadFontBytes(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_DesignHandle v1;
    if(!Autobind<ODE_DesignHandle>::read_into(info[0], v1)) return Napi::Value();
    ODE_StringRef v2;
    if(!Autobind<ODE_StringRef>::read_into(info[1], v2)) return Napi::Value();
    auto arg3 = Autobind<ODE_MemoryBuffer >::read_ptr(info[2]);
    if (arg3 == nullptr) return Napi::Value();
    ODE_StringRef v4;
    if(!Autobind<ODE_StringRef>::read_into(info[3], v4)) return Napi::Value();
    auto result = ode_design_loadFontBytes(v1, v2, arg3, v4);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_design_getComponent(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_DesignHandle v1;
    if(!Autobind<ODE_DesignHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_ComponentHandle >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    ODE_StringRef v3;
    if(!Autobind<ODE_StringRef>::read_into(info[2], v3)) return Napi::Value();
    auto result = ode_design_getComponent(v1, arg2, v3);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_component_addLayer(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    ODE_StringRef v2;
    if(!Autobind<ODE_StringRef>::read_into(info[1], v2)) return Napi::Value();
    ODE_StringRef v3;
    if(!Autobind<ODE_StringRef>::read_into(info[2], v3)) return Napi::Value();
    ODE_StringRef v4;
    if(!Autobind<ODE_StringRef>::read_into(info[3], v4)) return Napi::Value();
    auto arg5 = Autobind<ODE_ParseError >::read_ptr(info[4]);
    if (arg5 == nullptr) return Napi::Value();
    auto result = ode_component_addLayer(v1, v2, v3, v4, arg5);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_component_modifyLayer(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    ODE_StringRef v2;
    if(!Autobind<ODE_StringRef>::read_into(info[1], v2)) return Napi::Value();
    ODE_StringRef v3;
    if(!Autobind<ODE_StringRef>::read_into(info[2], v3)) return Napi::Value();
    auto arg4 = Autobind<ODE_ParseError >::read_ptr(info[3]);
    if (arg4 == nullptr) return Napi::Value();
    auto result = ode_component_modifyLayer(v1, v2, v3, arg4);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_pr1_component_loadAnimation(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    ODE_StringRef v2;
    if(!Autobind<ODE_StringRef>::read_into(info[1], v2)) return Napi::Value();
    auto arg3 = Autobind<ODE_ParseError >::read_ptr(info[2]);
    if (arg3 == nullptr) return Napi::Value();
    auto result = ode_pr1_component_loadAnimation(v1, v2, arg3);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_pr1_component_getAnimationValueAtTime(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    int v2;
    if(!Autobind<int>::read_into(info[1], v2)) return Napi::Value();
    ODE_Scalar v3;
    if(!Autobind<ODE_Scalar>::read_into(info[2], v3)) return Napi::Value();
    ODE_VarDataPtr v4;
    if(!Autobind<ODE_VarDataPtr>::read_into(info[3], v4)) return Napi::Value();
    auto result = ode_pr1_component_getAnimationValueAtTime(v1, v2, v3, v4);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_component_listLayers(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_LayerList >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    auto result = ode_component_listLayers(v1, arg2);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_component_identifyLayer(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_String >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    ODE_Vector2 v3;
    if(!Autobind<ODE_Vector2>::read_into(info[2], v3)) return Napi::Value();
    ODE_Scalar v4;
    if(!Autobind<ODE_Scalar>::read_into(info[3], v4)) return Napi::Value();
    auto result = ode_component_identifyLayer(v1, arg2, v3, v4);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_component_getLayerMetrics(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    ODE_StringRef v2;
    if(!Autobind<ODE_StringRef>::read_into(info[1], v2)) return Napi::Value();
    auto arg3 = Autobind<ODE_LayerMetrics >::read_ptr(info[2]);
    if (arg3 == nullptr) return Napi::Value();
    auto result = ode_component_getLayerMetrics(v1, v2, arg3);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_component_listMissingFonts(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_StringList >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    auto result = ode_component_listMissingFonts(v1, arg2);
    return Napi::String::New(env, Result_to_string(result));
}

Napi::Value bind_ode_component_getOctopus(const Napi::CallbackInfo& info) {
    auto env = info.Env();
    ODE_ComponentHandle v1;
    if(!Autobind<ODE_ComponentHandle>::read_into(info[0], v1)) return Napi::Value();
    auto arg2 = Autobind<ODE_String >::read_ptr(info[1]);
    if (arg2 == nullptr) return Napi::Value();
    auto result = ode_component_getOctopus(v1, arg2);
    return Napi::String::New(env, Result_to_string(result));
}

