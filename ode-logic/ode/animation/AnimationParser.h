
#pragma once

#include <string>
#include "../../../liboctopus/octopus/general.h"
#include "DocumentAnimation.h"

namespace ode {

// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

class AnimationParser {

public:
    enum ErrorType {
        OK,
        JSON_SYNTAX_ERROR,
        UNEXPECTED_END_OF_FILE,
        TYPE_MISMATCH,
        ARRAY_SIZE_MISMATCH,
        UNKNOWN_KEY,
        UNKNOWN_ENUM_VALUE,
        VALUE_OUT_OF_RANGE,
        STRING_EXPECTED,
        UTF16_ENCODING_ERROR,
    };

    struct Error {
        ErrorType type;
        int position;

        inline Error(ErrorType type = ErrorType::OK, int position = -1) : type(type), position(position) { }
        operator ErrorType() const;
        operator bool() const;
        const char *typeString() const;
    };

    static Error parse(ode::DocumentAnimation &output, const char *jsonString);

protected:
    const char *cur;

    explicit AnimationParser(const char *str);
    void skipWhitespace();
    ErrorType skipValue();
    bool matchSymbol(char s);
    ErrorType unescape(char *codepoints);
    static bool isAlphanumeric(char c);

    ErrorType parseStdString(std::string &value);
    ErrorType parseOdeLayerAnimationType(ode::LayerAnimation::Type &value);
    ErrorType parseDouble(double &value);
    ErrorType parseStdVectorDouble(std::vector<double> &value);
    ErrorType parseNonstdOptionalStdVectorDouble(nonstd::optional<std::vector<double> > &value);
    ErrorType parseStdArrayDouble6(std::array<double, 6> &value);
    ErrorType parseNonstdOptionalStdArrayDouble6(nonstd::optional<std::array<double, 6> > &value);
    ErrorType parseNonstdOptionalDouble(nonstd::optional<double> &value);
    ErrorType parseOctopusColor(octopus::Color &value);
    ErrorType parseNonstdOptionalOctopusColor(nonstd::optional<octopus::Color> &value);
    ErrorType parseOdeLayerAnimationKeyframe(ode::LayerAnimation::Keyframe &value);
    ErrorType parseStdVectorOdeLayerAnimationKeyframe(std::vector<ode::LayerAnimation::Keyframe> &value);
    ErrorType parseStdArrayDouble2(std::array<double, 2> &value);
    ErrorType parseNonstdOptionalStdArrayDouble2(nonstd::optional<std::array<double, 2> > &value);
    ErrorType parseOdeLayerAnimation(ode::LayerAnimation &value);
    ErrorType parseStdVectorOdeLayerAnimation(std::vector<ode::LayerAnimation> &value);
    ErrorType parseOdeDocumentAnimation(ode::DocumentAnimation &value);

};

}
