
// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

#pragma once

#include <octopus/general.h>
#include "DocumentAnimation.h"

namespace ode {

class AnimationParser {

public:
    struct Error {
        enum Type {
            OK,
            JSON_SYNTAX_ERROR,
            UNEXPECTED_END_OF_FILE,
            TYPE_MISMATCH,
            ARRAY_SIZE_MISMATCH,
            UNKNOWN_KEY,
            UNKNOWN_ENUM_VALUE,
            VALUE_OUT_OF_RANGE,
            STRING_EXPECTED,
            UTF16_ENCODING_ERROR
        } type; 
        int position;

        inline Error(Type type = Error::OK, int position = -1) : type(type), position(position) { }
        operator Type() const;
        operator bool() const;
        const char *typeString() const;
    };

    static Error parse(ode::DocumentAnimation &output, const char *jsonString);

protected:
    const char *cur;

    explicit AnimationParser(const char *str);
    void skipWhitespace();
    Error::Type skipValue();
    bool matchSymbol(char s);
    bool readHexQuad(int &value);
    Error::Type unescape(char *codepoints);
    static bool isAlphanumeric(char c);
    static int decodeHexDigit(char digit);

    Error::Type parseStdString(std::string &value);
    Error::Type parseOdeLayerAnimationType(ode::LayerAnimation::Type &value);
    Error::Type parseDouble(double &value);
    Error::Type parseStdVectorDouble(std::vector<double> &value);
    Error::Type parseNonstdOptionalStdVectorDouble(nonstd::optional<std::vector<double> > &value);
    Error::Type parseStdArrayDouble6(std::array<double, 6> &value);
    Error::Type parseNonstdOptionalStdArrayDouble6(nonstd::optional<std::array<double, 6> > &value);
    Error::Type parseNonstdOptionalDouble(nonstd::optional<double> &value);
    Error::Type parseOctopusColor(octopus::Color &value);
    Error::Type parseNonstdOptionalOctopusColor(nonstd::optional<octopus::Color> &value);
    Error::Type parseOdeLayerAnimationKeyframe(ode::LayerAnimation::Keyframe &value);
    Error::Type parseStdVectorOdeLayerAnimationKeyframe(std::vector<ode::LayerAnimation::Keyframe> &value);
    Error::Type parseStdArrayDouble2(std::array<double, 2> &value);
    Error::Type parseNonstdOptionalStdArrayDouble2(nonstd::optional<std::array<double, 2> > &value);
    Error::Type parseOdeLayerAnimation(ode::LayerAnimation &value);
    Error::Type parseStdVectorOdeLayerAnimation(std::vector<ode::LayerAnimation> &value);
    Error::Type parseOdeDocumentAnimation(ode::DocumentAnimation &value);

};

}
