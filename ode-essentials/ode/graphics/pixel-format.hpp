
#include "pixel-format.h"

#include <cmath>
#include <algorithm>

namespace ode {

constexpr int operator&(PixelFormat format, int mask) {
    return int(format)&mask;
}

constexpr int pixelChannels(PixelFormat format) {
    return format&PIXEL_CHANNEL_COUNT_MASK;
}

constexpr size_t pixelSize(PixelFormat format) {
    return (format&PIXEL_FLOAT_BIT ? sizeof(float) : sizeof(byte))*pixelChannels(format);
}

constexpr bool pixelHasAlpha(PixelFormat format) {
    return (format&PIXEL_ALPHA_ONLY_BIT) || pixelChannels(format) >= (format&PIXEL_LUMINANCE_BIT ? 2 : 4);
}

constexpr bool isPixelPremultiplied(PixelFormat format) {
    return (format&PIXEL_PREMULTIPLIED_BIT) != 0;
}

constexpr bool isPixelLinear(PixelFormat format) {
    return (format&PIXEL_LINEAR_BIT) != 0;
}

constexpr bool isPixelFloat(PixelFormat format) {
    return (format&PIXEL_FLOAT_BIT) != 0;
}

constexpr byte channelPremultiply(byte x, byte a) {
    return byte((unsigned(x)*unsigned(a)+0xffu)>>8);
}

constexpr byte channelUnpremultiply(byte x, byte a) {
    ODE_ASSERT(x <= a);
    if (a)
        return byte(0xffu*unsigned(x)/unsigned(a));
    return byte(0);
}

constexpr byte channelFloatToByte(float x) {
    return byte(~int(255.5f-255.f*std::min(std::max(x, 0.f), 1.f)));
}

constexpr byte channelFloatToByte(double x) {
    return byte(~int(255.5-255.*std::min(std::max(x, 0.), 1.)));
}

constexpr float channelByteToFloat(byte x) {
    return 1.f/255.f*float(x);
}

constexpr double channelByteToDouble(byte x) {
    return 1./255.*double(x);
}

constexpr float sRGBfromLinear(float x) {
    if (x <= .0031308f)
        return 12.92f*x;
    return 1.055f*powf(x, 1.f/2.4f)-(1.055f-1.f);
}

constexpr double sRGBfromLinear(double x) {
    if (x <= .0031308)
        return 12.92*x;
    return 1.055*pow(x, 1./2.4)-(1.055-1.);
}

constexpr float sRGBtoLinear(float x) {
    if (x <= .04045f)
        return 1.f/12.92f*x;
    return powf(1.f/1.055f*(x+(1.055f-1.f)), 2.4f);
}

constexpr double sRGBtoLinear(double x) {
    if (x <= .04045)
        return 1./12.92*x;
    return pow(1./1.055*(x+(1.055-1.)), 2.4);
}

constexpr byte sRGBbyteFromLinear(float x) {
    return channelFloatToByte(sRGBfromLinear(x));
}

constexpr byte sRGBbyteFromLinear(double x) {
    return channelFloatToByte(sRGBfromLinear(x));
}

constexpr double SRGB_BYTE_TO_LINEAR_LOOKUP_TABLE[256] = {
    0.0000000000000000000, 0.0003035269835488375, 0.0006070539670976750, 0.0009105809506465125, 0.0012141079341953501, 0.0015176349177441874, 0.0018211619012930250, 0.0021246888848418626,
    0.0024282158683907001, 0.0027317428519395373, 0.0030352698354883748, 0.0033465357638991586, 0.0036765073240474350, 0.0040247170184963040, 0.0043914420374102925, 0.0047769534806937275,
    0.0051815167023383851, 0.0056053916242027211, 0.0060488330228570522, 0.0065120907925944717, 0.0069954101872653851, 0.0074990320432261701, 0.0080231929853849925, 0.0085681256180693017,
    0.0091340587022207854, 0.0097212173202378439, 0.0103298230296269365, 0.0109600940064882406, 0.0116122451797438814, 0.0122864883569158666, 0.0129830323421730072, 0.0137020830472896829,
    0.0144438435960925413, 0.0152085144229127060, 0.0159962933655096277, 0.0168073757528873768, 0.0176419544883840776, 0.0185002201283796901, 0.0193823609569357229, 0.0202885630566523902,
    0.0212190103760035546, 0.0221738847933873745, 0.0231533661781104030, 0.0241576324485047490, 0.0251868596273616234, 0.0262412218948498907, 0.0273208916390748902, 0.0284260395044207866,
    0.0295568344378087967, 0.0307134437329936207, 0.0318960330730115177, 0.0331047665708850483, 0.0343398068086821634, 0.0356013148750203220, 0.0368894504011000185, 0.0382043715953464813,
    0.0395462352767328301, 0.0409151969068531698, 0.0423114106208096544, 0.0437350292569734511, 0.0451862043856755408, 0.0466650863368800808, 0.0481718242268894051, 0.0497065659841272184,
    0.0512694583740432239, 0.0528606470231802530, 0.0544802764424423547, 0.0561284900496000771, 0.0578054301910672086, 0.0595112381629811851, 0.0612460542316175943, 0.0630100176531676603,
    0.0648032666929057588, 0.0666259386437728779, 0.0684781698444001524, 0.0703600956965958757, 0.0722718506823174789, 0.0742135683801496138, 0.0761853814813078095, 0.0781874218051863273,
    0.0802198203144683097, 0.0822827071298147944, 0.0843762115441487742, 0.0865004620365497356, 0.0886555862857729415, 0.0908417111834076835, 0.0930589628466874236, 0.0953074666309646629,
    0.0975873471418624155, 0.0998987282471138910, 0.1022417330881012776, 0.1046164840911041616, 0.1070231029782675869, 0.1094617107782993315, 0.1119324278369055736, 0.1144353738269737186,
    0.1169706677585108101, 0.1195384279883456025, 0.1221387722296018441, 0.1247718175609504598, 0.1274376804356474324, 0.1301364766903642667, 0.1328683215538179196, 0.1356333296552056367,
    0.1384316150324518269, 0.1412632911402716407, 0.1441284708580577167, 0.1470272664975949828, 0.1499597898106085347, 0.1529261519961501448, 0.1559264637078273397, 0.1589608350608803511,
    0.1620293756391109896, 0.1651321945016676063, 0.1682694001896906932, 0.1714411007328225378, 0.1746474036555849818, 0.1778884159836291168, 0.1811642442498601346, 0.1844749945004408864,
    0.1878207723006777852, 0.1912016827407913566, 0.1946178304415757121, 0.1980693195599488032, 0.2015562537943970667, 0.2050787363903169014, 0.2086368701452556706, 0.2122307574140550879,
    0.2158605001138991508, 0.2195261997292691780, 0.2232279573168084175, 0.2269658735100983371, 0.2307400485243489563, 0.2345505821610050778, 0.2383975738122709465, 0.2422811224655547213,
    0.2462013267078353995, 0.2501582847299532730, 0.2541520943308266944, 0.2581828529215957624, 0.2622506575296960074, 0.2663556048028623002, 0.2704977910130657581, 0.2746773120603845375,
    0.2788942634768103446, 0.2831487404299919408, 0.2874408377269174197, 0.2917706498175358654, 0.2961382707983209461, 0.3005437944157763885, 0.3049873140698861063, 0.3094689228175084295,
    0.3139887133757174875, 0.3185467781250917452, 0.3231432091129506912, 0.3277780980565420665, 0.3324515363461791884, 0.3371636150483302563, 0.3419144249086607523, 0.3467040563550294885,
    0.3515325995004391912, 0.3564001441459433983, 0.3613067797835094463, 0.3662525955988393811, 0.3712376804741489567, 0.3762621229909062226, 0.3813260114325299766, 0.3864294337870489149,
    0.3915724777497230913, 0.3967552307256267952, 0.4019777798321956253, 0.4072402119017366484, 0.4125426134839035863, 0.4178850708481372522, 0.4232676699860715153, 0.4286904966139065687,
    0.4341536361747487804, 0.4396571738409187358, 0.4452011945162277495, 0.4507857828382233478, 0.4564110231804044959, 0.4620769996544068503, 0.4677837961121588117, 0.4735314961480093232,
    0.4793201831008266356, 0.4851499400560703723, 0.4910208498478354500, 0.4969329950608703528, 0.5028864580325683731, 0.5088813208549335387, 0.5149176653765212830, 0.5209955732043540788,
    0.5271151257058129813, 0.5332764040105050229, 0.5394794890121069608, 0.5457244613701865976, 0.5520114015119998996, 0.5583403896342676864, 0.5647115057049288955, 0.5711248294648728629,
    0.5775804404296505101, 0.5840784178911639923, 0.5906188409193368072, 0.5972017883637631419, 0.6038273388553374588, 0.6104955708078646515, 0.6172065624196508837, 0.6239603916750758872,
    0.6307571363461467184, 0.6375968739940324204, 0.6444796819705820301, 0.6514056374198239352, 0.6583748172794482434, 0.6653872982822719440, 0.6724431569576873047, 0.6795424696330937264,
    0.6866853124353131665, 0.6938717612919897970, 0.7011018919329731203, 0.7083757798916866522, 0.7156935005064805067, 0.7230551289219688815, 0.7304607400903533332, 0.7379104087727307304,
    0.7454042095403872192, 0.7529422167760777551, 0.7605245046752922011, 0.7681511472475068825, 0.7758222183174233733, 0.7835377915261931836, 0.7912979403326300121, 0.7991027380144086756,
    0.8069522576692513827, 0.8148465722161011282, 0.8227857543962833198, 0.8307698767746545254, 0.8387990117407398971, 0.8468732315098577157, 0.8549926081242336107, 0.8631572134541020125,
    0.8713671191987970577, 0.8796223968878317256, 0.8879231178819664283, 0.8962693533742666085, 0.9046611743911491255, 0.9130986517934188695, 0.9215818562772944977, 0.9301108583754233994,
    0.9386857284578877803, 0.9473065367331996445, 0.9559733532492860064, 0.9646862478944651098, 0.9734452903984123218, 0.9822505503331170340, 0.9911020971138296831, 1.0000000000000000000,
};

constexpr double sRGBbyteToLinear(byte x) {
    return SRGB_BYTE_TO_LINEAR_LOOKUP_TABLE[x];
}

}
