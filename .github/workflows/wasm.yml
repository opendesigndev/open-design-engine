name: WebAssembly build
on:
  - push

env:
  GITLAB_REGISTRY: registry.avcd.cz
  GITLAB_PROJECT: opendesign/open-design-engine/wasm
  GITLAB_USERNAME: registry
  DOCKER_CACHE: "type=s3,region=us-east-1,bucket=opendesign-pc-ceros-dev-github-ci,prefix=open-design-engine/wasm/"
  EMSCRIPTEN_VERSION: 3.1.12
  EMSCRIPTEN_PORTS: freetype zlib harfbuzz libpng icu libjpeg

jobs:
  wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Personal token with read-only access to liboctopus and open-design-text-renderer
          # https://github.com/organizations/opendesigndev/settings/personal-access-tokens/39049
          token: ${{ secrets.ODE_REPOS_TOKEN }}
          submodules: true
      - uses: ./.github/actions/determine-version
        with:
          github_token: ${{ github.token }}
          ref_name: ${{ github.ref_name }}
          ref: ${{ github.ref }}
      - name: "Emscripten: Setup cache"
        uses: actions/cache@v3
        with:
          path: "emsdk-cache"
          key: emscripten-${{env.EMSCRIPTEN_VERSION}}-${{ runner.os }}-${{ env.EMSCRIPTEN_PORTS }}
      - name: "Emscripten: Setup emsdk"
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
          actions-cache-folder: "emsdk-cache"
      - name: "Emscripten ports: Build"
        run: embuilder build ${{ env.EMSCRIPTEN_PORTS }}
      - name: "Skia: Restore cache"
        id: cache-skia
        uses: actions/cache/restore@v3
        with:
          path: |
            third-party/skia/out/wasm/release/libskia.a
            third-party/skia/out/include
          key: wasm-skia-${{ hashFiles('third-party/skia/**/*') }}
      - name: "Skia: Build"
        if: steps.cache-skia.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get -y install ninja-build
          ./third-party/skia/build.sh
      - name: "Skia: Save cache"
        uses: actions/cache/save@v3
        if: steps.cache-skia.outputs.cache-hit != 'true'
        with:
          path: |
            third-party/skia/out/wasm/release/libskia.a
            third-party/skia/out/include
          key: ${{ steps.cache-skia.outputs.cache-primary-key }}
      - name: Configure WASM
        run: cmake --preset wasm-rel
      - name: Build WASM
        run: cmake --build --preset wasm-rel --parallel
      - name: WASM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-build
          path: |
            build/wasm-rel/ode-napi
      - uses: ./.github/actions/npm-publish
        if: env.ODE_SHOULD_PUBLISH_TO_NPM
        with:
          npm_token: ${{ secrets.NPM_TOKEN }}
          directory: build/wasm-rel/ode-napi/target-specific
      - uses: ./.github/actions/npm-publish
        if: env.ODE_SHOULD_PUBLISH_TO_NPM
        with:
          npm_token: ${{ secrets.NPM_TOKEN }}
          directory: build/wasm-rel/ode-napi/wrapper
