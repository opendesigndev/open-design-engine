
cmake_minimum_required(VERSION 3.16)

# Read version from vcpkg.json
include(version.cmake)

# Configuration
option(ODE_RENDERER_ENABLED "Build ODE with rendering capabilities" ON)
option(ODE_TEST_MODULES "Build tests and testing utilities (optional)" ON)
option(ODE_SKIA_GPU "Enable GPU acceleration for Skia library" ON)

# Make sure that vcpkg toolchain file is set
if(NOT CMAKE_TOOLCHAIN_FILE AND NOT EMSCRIPTEN)
    if(DEFINED ENV{VCPKG_ROOT})
        set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")
    else()
        message(SEND_ERROR "Vcpkg toolchain not configured. Either set VCPKG_ROOT environment variable or pass -DCMAKE_TOOLCHAIN_FILE=VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake to cmake")
    endif()
endif()

# Set static vcpkg triplet for Windows
if(WIN32 AND NOT VCPKG_TARGET_TRIPLET)
    if(${CMAKE_GENERATOR_PLATFORM} MATCHES "64$")
        set(VCPKG_TARGET_TRIPLET "x64-windows-static")
    elseif(${CMAKE_GENERATOR_PLATFORM} MATCHES "32$" OR ${CMAKE_GENERATOR_PLATFORM} STREQUAL "x86")
        set(VCPKG_TARGET_TRIPLET "x86-windows-static")
    else()
        message(WARNING "Vcpkg triplet not explicitly specified and could not be deduced. Recommend using -DVCPKG_TARGET_TRIPLET=x86-windows-static or similar")
    endif()
endif()

# Specify how to search for dependencies (Emscripten for wasm, vcpkg for everything else)
if(EXPLICIT_MODULE_PATH)
    list(INSERT CMAKE_MODULE_PATH 0 "${EXPLICIT_MODULE_PATH}")
endif()
if(EMSCRIPTEN)
    list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/third-party/wasm-cmake")
else()
    set(VCPKG_MANIFEST_NO_DEFAULT_FEATURES ON)
    if(NOT OVERRIDE_SKIA_LIBRARY)
        if(NOT OVERRIDE_OPENGL_LIBRARY)
            list(APPEND VCPKG_MANIFEST_FEATURES "skia")
        else()
            list(APPEND VCPKG_MANIFEST_FEATURES "skia-no-gl")
        endif()
    endif()
    list(APPEND VCPKG_MANIFEST_FEATURES "freetype")
    list(APPEND VCPKG_MANIFEST_FEATURES "harfbuzz")
    list(APPEND VCPKG_MANIFEST_FEATURES "icu")
    if(ODE_RENDERER_ENABLED)
        list(APPEND VCPKG_MANIFEST_FEATURES "image-formats")
        if(NOT OVERRIDE_GLFW_LIBRARY)
            list(APPEND VCPKG_MANIFEST_FEATURES "glfw")
        endif()
        if(NOT OVERRIDE_GLEW_LIBRARY)
            list(APPEND VCPKG_MANIFEST_FEATURES "glew")
        endif()
    endif()
endif()
if(ODE_TEST_MODULES)
    list(APPEND VCPKG_MANIFEST_FEATURES "gtest")
endif()

project(open-design-engine VERSION ${ODE_VERSION} LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

# Fake library to convince cmake that everything is OK
# TODO get rid of this and find a different solution
if(EMSCRIPTEN)
    message(WARNING "TODO get rid of null target!")
    file(WRITE "${CMAKE_BINARY_DIR}/null.cpp" "")
    add_library(null "${CMAKE_BINARY_DIR}/null.cpp")
    target_include_directories(null PUBLIC "${EMSCRIPTEN_SYSROOT}/include")
endif()

# Third-party packages
find_package(Freetype REQUIRED)
if(EMSCRIPTEN)
    find_package(HarfBuzz REQUIRED)
else()
    find_package(harfbuzz REQUIRED)
endif()
find_package(ICU REQUIRED)
find_package(skia REQUIRED)
if(ODE_RENDERER_ENABLED)
    if(NOT OVERRIDE_OPENGL_LIBRARY)
        find_package(OpenGL REQUIRED)
    endif()
    if(NOT EMSCRIPTEN)
        find_package(glfw3 REQUIRED)
        find_package(GLEW REQUIRED)
    endif()
endif()

# Global configuration
add_compile_definitions(GLEW_NO_GLU)

# Modules
add_subdirectory(liboctopus)
add_subdirectory(open-design-text-renderer)
add_subdirectory(ode-essentials)
add_subdirectory(ode-rasterizer)
add_subdirectory(ode-logic)
if(ODE_RENDERER_ENABLED)
    if(NOT EMSCRIPTEN)
        add_subdirectory(ode-media)
    endif()
    add_subdirectory(ode-graphics)
    add_subdirectory(ode-renderer)
    #add_subdirectory(ode-interactive)
    add_subdirectory(ode-animation-prototype)
endif()
if(ODE_TEST_MODULES)
    add_subdirectory(ode-diagnostics)
    add_subdirectory(tests/renderer-unit-tests)
    add_subdirectory(tools/render-graph-inspector)
endif()

# Select which project will be initially selected as "Startup Project" in Visual Studio
if(ODE_RENDERER_ENABLED)
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ode-renderer-cli)
else()
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ode-logic-cli)
endif()
