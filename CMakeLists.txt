
cmake_minimum_required(VERSION 3.16)
# Recommended by cmake-js https://github.com/cmake-js/cmake-js
cmake_policy(SET CMP0091 NEW)
cmake_policy(SET CMP0042 NEW)

# Read version from vcpkg.json
include(version.cmake)

# Configuration
option(ODE_RENDERER_ENABLED "Build ODE with rendering capabilities" ON)
option(ODE_TEST_MODULES "Build tests and testing utilities (optional)" ON)
option(ODE_SKIA_GPU "Enable GPU acceleration for Skia library" ON)
if(EMSCRIPTEN)
    option(ODE_USE_WEBGL2 "Use WebGL version 2 (otherwise WebGL 1 is used)" OFF)
endif()

# Default to release if not multi-config
get_property(ODE_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(NOT ODE_MULTI_CONFIG AND NOT CMAKE_BUILD_TYPE)
    message(STATUS "CMAKE_BUILD_TYPE not set, defaulting to Release")
    set(CMAKE_BUILD_TYPE Release CACHE STRING "")
endif()

# Make sure that vcpkg toolchain file is set
if(NOT CMAKE_TOOLCHAIN_FILE AND NOT EMSCRIPTEN)
    if(DEFINED ENV{VCPKG_ROOT})
        set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")
    else()
        include(FetchContent)
        FetchContent_Declare(vcpkg
            GIT_REPOSITORY https://github.com/microsoft/vcpkg
            GIT_TAG ${ODE_VCPKG_BUILTIN_BASELINE}
        )
        FetchContent_MakeAvailable(vcpkg)
        set(CMAKE_TOOLCHAIN_FILE "${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake" CACHE FILEPATH "")
    endif()
endif()
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_OSX_DEPLOYMENT_TARGET 13.0)

# Set static vcpkg triplet for Windows
if(WIN32 AND NOT VCPKG_TARGET_TRIPLET)
    if(${CMAKE_GENERATOR_PLATFORM} MATCHES "64$")
        set(VCPKG_TARGET_TRIPLET "x64-windows-static")
    elseif(${CMAKE_GENERATOR_PLATFORM} MATCHES "32$" OR ${CMAKE_GENERATOR_PLATFORM} STREQUAL "x86")
        set(VCPKG_TARGET_TRIPLET "x86-windows-static")
    else()
        message(WARNING "Vcpkg triplet not explicitly specified and could not be deduced. Recommend using -DVCPKG_TARGET_TRIPLET=x86-windows-static or similar")
    endif()
endif()

# Specify how to search for dependencies (Emscripten for wasm, vcpkg for everything else)
if(EXPLICIT_MODULE_PATH)
    list(INSERT CMAKE_MODULE_PATH 0 "${EXPLICIT_MODULE_PATH}")
endif()
if(EMSCRIPTEN)
    if(DEFINED ENV{ODE_PREBUILT_THIRDPARTY})
        list(INSERT CMAKE_MODULE_PATH 0 $ENV{ODE_PREBUILT_THIRDPARTY})
    else()
        list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/third-party/wasm-cmake")
    endif()
else()
    set(VCPKG_MANIFEST_NO_DEFAULT_FEATURES ON)
    if(NOT OVERRIDE_SKIA_LIBRARY)
        if(NOT OVERRIDE_OPENGL_LIBRARY)
            list(APPEND VCPKG_MANIFEST_FEATURES "skia")
        else()
            list(APPEND VCPKG_MANIFEST_FEATURES "skia-no-gl")
        endif()
    endif()
    list(APPEND VCPKG_MANIFEST_FEATURES "freetype")
    list(APPEND VCPKG_MANIFEST_FEATURES "harfbuzz")
    list(APPEND VCPKG_MANIFEST_FEATURES "icu")
    if(ODE_RENDERER_ENABLED)
        list(APPEND VCPKG_MANIFEST_FEATURES "image-formats")
        if(NOT OVERRIDE_GLFW_LIBRARY)
            list(APPEND VCPKG_MANIFEST_FEATURES "glfw")
        endif()
        if(NOT OVERRIDE_GLEW_LIBRARY)
            list(APPEND VCPKG_MANIFEST_FEATURES "glew")
        endif()
    endif()
    list(APPEND VCPKG_MANIFEST_FEATURES "node-api")
endif()
if(ODE_TEST_MODULES)
    list(APPEND VCPKG_MANIFEST_FEATURES "gtest")
endif()

project(open-design-engine VERSION ${ODE_VERSION} LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

if(NOT MSVC)
    add_compile_options(-Wno-empty-body)
endif()

# Third-party packages
find_package(Freetype REQUIRED)
find_package(harfbuzz REQUIRED)
find_package(ICU REQUIRED)
find_package(skia REQUIRED)
if(ODE_RENDERER_ENABLED)
    if(NOT OVERRIDE_OPENGL_LIBRARY)
        find_package(OpenGL REQUIRED)
    endif()
    if(NOT EMSCRIPTEN)
        find_package(glfw3 REQUIRED)
        find_package(GLEW REQUIRED)
    endif()
endif()

# Global configuration
add_compile_definitions(GLEW_NO_GLU)

# Set TEXT_RENDERER_TEST_MODULES option for the open-design-text-renderer subproject
if(NOT DEFINED TEXT_RENDERER_TEST_MODULES)
    if(ODE_TEST_MODULES)
        set(TEXT_RENDERER_TEST_MODULES ON CACHE INTERNAL "Build Text Renderer tests and testing utilities" FORCE)
    else()
        set(TEXT_RENDERER_TEST_MODULES OFF CACHE INTERNAL "Build Text Renderer tests and testing utilities" FORCE)
    endif()
endif()

# Modules
add_subdirectory(liboctopus)
add_subdirectory(open-design-text-renderer)
add_subdirectory(ode-essentials)
add_subdirectory(ode-rasterizer)
add_subdirectory(ode-logic)
if(ODE_RENDERER_ENABLED)
    if(NOT EMSCRIPTEN)
        add_subdirectory(ode-media)
    endif()
    add_subdirectory(ode-graphics)
    add_subdirectory(ode-renderer)
    #add_subdirectory(ode-interactive)
    add_subdirectory(ode-napi)
endif()
if(ODE_TEST_MODULES)
    add_subdirectory(ode-diagnostics)
    add_subdirectory(tests/renderer-output-tests)
    add_subdirectory(tools/animation-prototype)
    add_subdirectory(tools/render-graph-inspector)
    add_subdirectory(tools/design-editor)
endif()

# Select which project will be initially selected as "Startup Project" in Visual Studio
if(ODE_RENDERER_ENABLED)
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ode-renderer-cli)
else()
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ode-logic-cli)
endif()
